

File0 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/controller/MainController.java


File1 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/controller/TestBController.java


File2 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/controller/TestAController.java


File3 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/controller/BlogController.java


File4 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/model/UserEntity.java


File5 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/model/TestAController.java


File6 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/model/BlogEntity.java


File7 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/repository/UserRepository.java


File8 /home/mbrito/git/thesis-web-applications/monoliths/simple-blog/src/main/java/com/gaussic/repository/BlogRepository.java
CompilationUnit(imports=[Import(path=com.gaussic.model.UserEntity, static=False, wildcard=False), Import(path=com.gaussic.repository.UserRepository, static=False, wildcard=False), Import(path=org.springframework.beans.factory.annotation.Autowired, static=False, wildcard=False), Import(path=org.springframework.stereotype.Controller, static=False, wildcard=False), Import(path=org.springframework.ui.ModelMap, static=False, wildcard=False), Import(path=org.springframework.web.bind.annotation.ModelAttribute, static=False, wildcard=False), Import(path=org.springframework.web.bind.annotation.PathVariable, static=False, wildcard=False), Import(path=org.springframework.web.bind.annotation.RequestMapping, static=False, wildcard=False), Import(path=org.springframework.web.bind.annotation.RequestMethod, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False)], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.controller), types=[ClassDeclaration(annotations=[Annotation(element=None, name=Controller)], body=[FieldDeclaration(annotations=[Annotation(element=None, name=Autowired)], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=userRepository)], documentation=None, modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=UserRepository, sub_type=None)), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/")), ElementValuePair(name=method, value=MemberReference(member=GET, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="index"), label=None)], documentation=None, modifiers={'public'}, name=index, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/users")), ElementValuePair(name=method, value=MemberReference(member=GET, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=findAll, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), name=userList)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None))], dimensions=[], name=List, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="userList"), MemberReference(member=userList, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addAttribute, postfix_operators=[], prefix_operators=[], qualifier=modelMap, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="admin/users"), label=None)], documentation=None, modifiers={'public'}, name=getUsers, parameters=[FormalParameter(annotations=[], modifiers=set(), name=modelMap, type=ReferenceType(arguments=None, dimensions=[], name=ModelMap, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/users/add")), ElementValuePair(name=method, value=MemberReference(member=GET, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="admin/addUser"), label=None)], documentation=None, modifiers={'public'}, name=addUser, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/users/addP")), ElementValuePair(name=method, value=MemberReference(member=POST, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getFirstName, postfix_operators=[], prefix_operators=[], qualifier=userEntity, selectors=[], type_arguments=None)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getLastName, postfix_operators=[], prefix_operators=[], qualifier=userEntity, selectors=[], type_arguments=None)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=userEntity, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=saveAndFlush, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="redirect:/admin/users"), label=None)], documentation=None, modifiers={'public'}, name=addUserPost, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="user"), name=ModelAttribute)], modifiers=set(), name=userEntity, type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/users/show/{id}")), ElementValuePair(name=method, value=MemberReference(member=GET, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=userId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findOne, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), name=userEntity)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="user"), MemberReference(member=userEntity, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addAttribute, postfix_operators=[], prefix_operators=[], qualifier=modelMap, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="admin/userDetail"), label=None)], documentation=None, modifiers={'public'}, name=showUser, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id"), name=PathVariable)], modifiers=set(), name=userId, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=modelMap, type=ReferenceType(arguments=None, dimensions=[], name=ModelMap, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/users/update/{id}")), ElementValuePair(name=method, value=MemberReference(member=GET, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=userId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findOne, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), name=userEntity)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="user"), MemberReference(member=userEntity, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addAttribute, postfix_operators=[], prefix_operators=[], qualifier=modelMap, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="admin/updateUser"), label=None)], documentation=None, modifiers={'public'}, name=updateUser, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id"), name=PathVariable)], modifiers=set(), name=userId, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=modelMap, type=ReferenceType(arguments=None, dimensions=[], name=ModelMap, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/users/updateP")), ElementValuePair(name=method, value=MemberReference(member=POST, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getNickname, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getFirstName, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getLastName, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPassword, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=user, selectors=[], type_arguments=None)], member=updateUser, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=flush, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="redirect:/admin/users"), label=None)], documentation=None, modifiers={'public'}, name=updateUserPost, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="userP"), name=ModelAttribute)], modifiers=set(), name=user, type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/users/delete/{id}")), ElementValuePair(name=method, value=MemberReference(member=GET, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=userId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=delete, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=flush, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="redirect:/admin/users"), label=None)], documentation=None, modifiers={'public'}, name=deleteUser, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id"), name=PathVariable)], modifiers=set(), name=userId, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=/**
 * Created by dzkan on 2016/3/8.
 */, extends=None, implements=None, modifiers={'public'}, name=MainController, type_parameters=None)])
CompilationUnit(imports=[Import(path=com.gaussic.model.TestAController, static=False, wildcard=False)], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.controller), types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=testA)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=BinaryOperation(operandl=MemberReference(member=a, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=b, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+), label=None)], documentation=None, modifiers={'public'}, name=add, parameters=[FormalParameter(annotations=[], modifiers=set(), name=a, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=b, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None)], documentation=None, extends=ReferenceType(arguments=None, dimensions=[], name=TestAController, sub_type=None), implements=None, modifiers={'public'}, name=TestBController, type_parameters=None)])
CompilationUnit(imports=[], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.controller), types=[ClassDeclaration(annotations=[], body=[], documentation=None, extends=None, implements=None, modifiers={'public'}, name=TestAController, type_parameters=None)])
CompilationUnit(imports=[Import(path=com.gaussic.model.BlogEntity, static=False, wildcard=False), Import(path=com.gaussic.model.UserEntity, static=False, wildcard=False), Import(path=com.gaussic.repository.BlogRepository, static=False, wildcard=False), Import(path=com.gaussic.repository.UserRepository, static=False, wildcard=False), Import(path=org.springframework.beans.factory.annotation.Autowired, static=False, wildcard=False), Import(path=org.springframework.stereotype.Controller, static=False, wildcard=False), Import(path=org.springframework.ui.ModelMap, static=False, wildcard=False), Import(path=org.springframework.web.bind.annotation.ModelAttribute, static=False, wildcard=False), Import(path=org.springframework.web.bind.annotation.PathVariable, static=False, wildcard=False), Import(path=org.springframework.web.bind.annotation.RequestMapping, static=False, wildcard=False), Import(path=org.springframework.web.bind.annotation.RequestMethod, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False)], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.controller), types=[ClassDeclaration(annotations=[Annotation(element=None, name=Controller)], body=[FieldDeclaration(annotations=[Annotation(element=None, name=Autowired)], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=blogRepository)], documentation=None, modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=BlogRepository, sub_type=None)), FieldDeclaration(annotations=[Annotation(element=None, name=Autowired)], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=userRepository)], documentation=None, modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=UserRepository, sub_type=None)), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/blogs")), ElementValuePair(name=method, value=MemberReference(member=GET, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=findAll, postfix_operators=[], prefix_operators=[], qualifier=blogRepository, selectors=[], type_arguments=None), name=blogList)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None))], dimensions=[], name=List, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="blogList"), MemberReference(member=blogList, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addAttribute, postfix_operators=[], prefix_operators=[], qualifier=modelMap, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="admin/blogs"), label=None)], documentation=None, modifiers={'public'}, name=showBlogs, parameters=[FormalParameter(annotations=[], modifiers=set(), name=modelMap, type=ReferenceType(arguments=None, dimensions=[], name=ModelMap, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/blogs/add")), ElementValuePair(name=method, value=MemberReference(member=GET, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=findAll, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), name=userList)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None))], dimensions=[], name=List, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="userList"), MemberReference(member=userList, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addAttribute, postfix_operators=[], prefix_operators=[], qualifier=modelMap, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="admin/addBlog"), label=None)], documentation=None, modifiers={'public'}, name=addBlog, parameters=[FormalParameter(annotations=[], modifiers=set(), name=modelMap, type=ReferenceType(arguments=None, dimensions=[], name=ModelMap, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/blogs/addP")), ElementValuePair(name=method, value=MemberReference(member=POST, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getTitle, postfix_operators=[], prefix_operators=[], qualifier=blogEntity, selectors=[], type_arguments=None)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getUserByUserId, postfix_operators=[], prefix_operators=[], qualifier=blogEntity, selectors=[MethodInvocation(arguments=[], member=getNickname, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=blogEntity, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=saveAndFlush, postfix_operators=[], prefix_operators=[], qualifier=blogRepository, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="redirect:/admin/blogs"), label=None)], documentation=None, modifiers={'public'}, name=addBlogPost, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="blog"), name=ModelAttribute)], modifiers=set(), name=blogEntity, type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/blogs/show/{id}"), name=RequestMapping)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findOne, postfix_operators=[], prefix_operators=[], qualifier=blogRepository, selectors=[], type_arguments=None), name=blog)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="blog"), MemberReference(member=blog, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addAttribute, postfix_operators=[], prefix_operators=[], qualifier=modelMap, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="admin/blogDetail"), label=None)], documentation=None, modifiers={'public'}, name=showBlog, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id"), name=PathVariable)], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=modelMap, type=ReferenceType(arguments=None, dimensions=[], name=ModelMap, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/blogs/update/{id}"), name=RequestMapping)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findOne, postfix_operators=[], prefix_operators=[], qualifier=blogRepository, selectors=[], type_arguments=None), name=blog)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=findAll, postfix_operators=[], prefix_operators=[], qualifier=userRepository, selectors=[], type_arguments=None), name=userList)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None))], dimensions=[], name=List, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="blog"), MemberReference(member=blog, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addAttribute, postfix_operators=[], prefix_operators=[], qualifier=modelMap, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="userList"), MemberReference(member=userList, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=addAttribute, postfix_operators=[], prefix_operators=[], qualifier=modelMap, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="admin/updateBlog"), label=None)], documentation=None, modifiers={'public'}, name=updateBlog, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id"), name=PathVariable)], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=modelMap, type=ReferenceType(arguments=None, dimensions=[], name=ModelMap, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=value, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/blogs/updateP")), ElementValuePair(name=method, value=MemberReference(member=POST, postfix_operators=[], prefix_operators=[], qualifier=RequestMethod, selectors=[]))], name=RequestMapping)], body=[StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getTitle, postfix_operators=[], prefix_operators=[], qualifier=blogEntity, selectors=[], type_arguments=None)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getTitle, postfix_operators=[], prefix_operators=[], qualifier=blogEntity, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getUserByUserId, postfix_operators=[], prefix_operators=[], qualifier=blogEntity, selectors=[MethodInvocation(arguments=[], member=getId, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), MethodInvocation(arguments=[], member=getContent, postfix_operators=[], prefix_operators=[], qualifier=blogEntity, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPubDate, postfix_operators=[], prefix_operators=[], qualifier=blogEntity, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getId, postfix_operators=[], prefix_operators=[], qualifier=blogEntity, selectors=[], type_arguments=None)], member=updateBlog, postfix_operators=[], prefix_operators=[], qualifier=blogRepository, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=flush, postfix_operators=[], prefix_operators=[], qualifier=blogRepository, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="redirect:/admin/blogs"), label=None)], documentation=None, modifiers={'public'}, name=updateBlogP, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="blogP"), name=ModelAttribute)], modifiers=set(), name=blogEntity, type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="/admin/blogs/delete/{id}"), name=RequestMapping)], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=delete, postfix_operators=[], prefix_operators=[], qualifier=blogRepository, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=flush, postfix_operators=[], prefix_operators=[], qualifier=blogRepository, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="redirect:/admin/blogs"), label=None)], documentation=None, modifiers={'public'}, name=deleteBlog, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id"), name=PathVariable)], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None)], documentation=/**
 * Created by dzkan on 2016/3/18.
 */, extends=None, implements=None, modifiers={'public'}, name=BlogController, type_parameters=None)])
CompilationUnit(imports=[Import(path=javax.persistence, static=False, wildcard=True), Import(path=java.util.Collection, static=False, wildcard=False)], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.model), types=[ClassDeclaration(annotations=[Annotation(element=None, name=Entity), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="user")), ElementValuePair(name=schema, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="springdemo")), ElementValuePair(name=catalog, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""))], name=Table)], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=nickname)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=password)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=firstName)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=lastName)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=blogsById)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None))], dimensions=[], name=Collection, sub_type=None)), MethodDeclaration(annotations=[Annotation(element=None, name=Id), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setId, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Basic), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="nickname")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)), ElementValuePair(name=length, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=45))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=nickname, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getNickname, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=nickname, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=nickname, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setNickname, parameters=[FormalParameter(annotations=[], modifiers=set(), name=nickname, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Basic), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="password")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)), ElementValuePair(name=length, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=45))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=password, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getPassword, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=password, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=password, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setPassword, parameters=[FormalParameter(annotations=[], modifiers=set(), name=password, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Basic), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="first_name")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), ElementValuePair(name=length, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=45))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=firstName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getFirstName, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=firstName, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=firstName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setFirstName, parameters=[FormalParameter(annotations=[], modifiers=set(), name=firstName, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Basic), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="last_name")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), ElementValuePair(name=length, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=45))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=lastName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getLastName, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=lastName, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=lastName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setLastName, parameters=[FormalParameter(annotations=[], modifiers=set(), name=lastName, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[]), operandr=MemberReference(member=o, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)), IfStatement(condition=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=o, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getClass, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[], member=getClass, postfix_operators=[], prefix_operators=[], qualifier=o, selectors=[], type_arguments=None), operator=!=), operator=||), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MemberReference(member=o, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None)), name=that)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), IfStatement(condition=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=nickname, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=BinaryOperation(operandl=MemberReference(member=nickname, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_true=MethodInvocation(arguments=[MemberReference(member=nickname, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=nickname, selectors=[], type_arguments=None)), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), IfStatement(condition=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=password, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=BinaryOperation(operandl=MemberReference(member=password, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_true=MethodInvocation(arguments=[MemberReference(member=password, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=password, selectors=[], type_arguments=None)), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), IfStatement(condition=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=firstName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=BinaryOperation(operandl=MemberReference(member=firstName, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_true=MethodInvocation(arguments=[MemberReference(member=firstName, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=firstName, selectors=[], type_arguments=None)), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), IfStatement(condition=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=lastName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=BinaryOperation(operandl=MemberReference(member=lastName, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_true=MethodInvocation(arguments=[MemberReference(member=lastName, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=lastName, selectors=[], type_arguments=None)), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], documentation=None, modifiers={'public'}, name=equals, parameters=[FormalParameter(annotations=[], modifiers=set(), name=o, type=ReferenceType(arguments=None, dimensions=[], name=Object, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=result)], modifiers=set(), type=BasicType(dimensions=[], name=int)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=31), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=nickname, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), if_true=MethodInvocation(arguments=[], member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=nickname, selectors=[], type_arguments=None)), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=31), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=password, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), if_true=MethodInvocation(arguments=[], member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=password, selectors=[], type_arguments=None)), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=31), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=firstName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), if_true=MethodInvocation(arguments=[], member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=firstName, selectors=[], type_arguments=None)), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=31), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=lastName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), if_true=MethodInvocation(arguments=[], member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=lastName, selectors=[], type_arguments=None)), operator=+)), label=None), ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=hashCode, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=[ElementValuePair(name=mappedBy, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="userByUserId"))], name=OneToMany)], body=[ReturnStatement(expression=MemberReference(member=blogsById, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getBlogsById, parameters=[], return_type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None))], dimensions=[], name=Collection, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=blogsById, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=blogsById, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setBlogsById, parameters=[FormalParameter(annotations=[], modifiers=set(), name=blogsById, type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None))], dimensions=[], name=Collection, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=/**
 * Created by dzkan on 2016/3/8.
 */, extends=None, implements=None, modifiers={'public'}, name=UserEntity, type_parameters=None)])
CompilationUnit(imports=[], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.model), types=[ClassDeclaration(annotations=[], body=[], documentation=None, extends=None, implements=None, modifiers={'public'}, name=TestAController, type_parameters=None)])
CompilationUnit(imports=[Import(path=org.springframework.format.annotation.DateTimeFormat, static=False, wildcard=False), Import(path=javax.persistence, static=False, wildcard=True), Import(path=java.util.Date, static=False, wildcard=False)], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.model), types=[ClassDeclaration(annotations=[Annotation(element=None, name=Entity), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="blog")), ElementValuePair(name=schema, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="springdemo")), ElementValuePair(name=catalog, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=""))], name=Table)], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=id)], documentation=None, modifiers={'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=title)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=content)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), FieldDeclaration(annotations=[Annotation(element=[ElementValuePair(name=pattern, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="yyyy-MM-dd"))], name=DateTimeFormat)], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=pubDate)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=Date, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=userByUserId)], documentation=None, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None)), MethodDeclaration(annotations=[Annotation(element=None, name=Id), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getId, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setId, parameters=[FormalParameter(annotations=[], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Basic), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="title")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)), ElementValuePair(name=length, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=100))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=title, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getTitle, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=title, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=title, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setTitle, parameters=[FormalParameter(annotations=[], modifiers=set(), name=title, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Basic), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="content")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)), ElementValuePair(name=length, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=255))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=content, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getContent, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=content, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=content, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setContent, parameters=[FormalParameter(annotations=[], modifiers=set(), name=content, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Basic), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="pub_date")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))], name=Column)], body=[ReturnStatement(expression=MemberReference(member=pubDate, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getPubDate, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=Date, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=pubDate, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=pubDate, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setPubDate, parameters=[FormalParameter(annotations=[], modifiers=set(), name=pubDate, type=ReferenceType(arguments=None, dimensions=[], name=Date, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[]), operandr=MemberReference(member=o, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator===), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)), IfStatement(condition=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=o, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getClass, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[], member=getClass, postfix_operators=[], prefix_operators=[], qualifier=o, selectors=[], type_arguments=None), operator=!=), operator=||), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MemberReference(member=o, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None)), name=that)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operator=!=), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), IfStatement(condition=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=title, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=BinaryOperation(operandl=MemberReference(member=title, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_true=MethodInvocation(arguments=[MemberReference(member=title, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=title, selectors=[], type_arguments=None)), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), IfStatement(condition=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=content, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=BinaryOperation(operandl=MemberReference(member=content, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_true=MethodInvocation(arguments=[MemberReference(member=content, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=content, selectors=[], type_arguments=None)), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), IfStatement(condition=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=pubDate, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=BinaryOperation(operandl=MemberReference(member=pubDate, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_true=MethodInvocation(arguments=[MemberReference(member=pubDate, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equals, postfix_operators=[], prefix_operators=['!'], qualifier=pubDate, selectors=[], type_arguments=None)), else_statement=None, label=None, then_statement=ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)), ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)], documentation=None, modifiers={'public'}, name=equals, parameters=[FormalParameter(annotations=[], modifiers=set(), name=o, type=ReferenceType(arguments=None, dimensions=[], name=Object, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=Override)], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=result)], modifiers=set(), type=BasicType(dimensions=[], name=int)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=31), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=title, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), if_true=MethodInvocation(arguments=[], member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=title, selectors=[], type_arguments=None)), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=31), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=content, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), if_true=MethodInvocation(arguments=[], member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=content, selectors=[], type_arguments=None)), operator=+)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=31), operandr=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=*), operandr=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=pubDate, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), if_true=MethodInvocation(arguments=[], member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=pubDate, selectors=[], type_arguments=None)), operator=+)), label=None), ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=hashCode, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[Annotation(element=None, name=ManyToOne), Annotation(element=[ElementValuePair(name=name, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="user_id")), ElementValuePair(name=referencedColumnName, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="id")), ElementValuePair(name=nullable, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))], name=JoinColumn)], body=[ReturnStatement(expression=MemberReference(member=userByUserId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=getUserByUserId, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=userByUserId, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=userByUserId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=None, modifiers={'public'}, name=setUserByUserId, parameters=[FormalParameter(annotations=[], modifiers=set(), name=userByUserId, type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=/**
 * Created by dzkan on 2016/3/8.
 */, extends=None, implements=None, modifiers={'public'}, name=BlogEntity, type_parameters=None)])
CompilationUnit(imports=[Import(path=com.gaussic.model.UserEntity, static=False, wildcard=False), Import(path=org.springframework.data.jpa.repository.JpaRepository, static=False, wildcard=False), Import(path=org.springframework.data.jpa.repository.Modifying, static=False, wildcard=False), Import(path=org.springframework.data.jpa.repository.Query, static=False, wildcard=False), Import(path=org.springframework.data.repository.query.Param, static=False, wildcard=False), Import(path=org.springframework.stereotype.Repository, static=False, wildcard=False), Import(path=org.springframework.transaction.annotation.Transactional, static=False, wildcard=False)], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.repository), types=[InterfaceDeclaration(annotations=[Annotation(element=None, name=Repository)], body=[MethodDeclaration(annotations=[Annotation(element=None, name=Modifying), Annotation(element=None, name=Transactional), Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="update UserEntity us set us.nickname=:qNickname, us.firstName=:qFirstName, us.lastName=:qLastName, us.password=:qPassword where us.id=:qId"), name=Query)], body=None, documentation=None, modifiers={'public'}, name=updateUser, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qNickname"), name=Param)], modifiers=set(), name=nickname, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False), FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qFirstName"), name=Param)], modifiers=set(), name=firstName, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False), FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qLastName"), name=Param)], modifiers=set(), name=qLastName, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False), FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qPassword"), name=Param)], modifiers=set(), name=password, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False), FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qId"), name=Param)], modifiers=set(), name=id, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=/**
 * Created by dzkan on 2016/3/8.
 */, extends=[ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=UserEntity, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=JpaRepository, sub_type=None)], modifiers={'public'}, name=UserRepository, type_parameters=None)])
CompilationUnit(imports=[Import(path=com.gaussic.model.BlogEntity, static=False, wildcard=False), Import(path=org.springframework.data.jpa.repository.JpaRepository, static=False, wildcard=False), Import(path=org.springframework.data.jpa.repository.Modifying, static=False, wildcard=False), Import(path=org.springframework.data.jpa.repository.Query, static=False, wildcard=False), Import(path=org.springframework.data.repository.query.Param, static=False, wildcard=False), Import(path=org.springframework.stereotype.Repository, static=False, wildcard=False), Import(path=org.springframework.transaction.annotation.Transactional, static=False, wildcard=False), Import(path=java.util.Date, static=False, wildcard=False)], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=com.gaussic.repository), types=[InterfaceDeclaration(annotations=[Annotation(element=None, name=Repository)], body=[MethodDeclaration(annotations=[Annotation(element=None, name=Modifying), Annotation(element=None, name=Transactional), Annotation(element=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="update BlogEntity blog set blog.title=:qTitle, blog.userByUserId.id=:qUserId,"), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=" blog.content=:qContent, blog.pubDate=:qPubDate where blog.id=:qId"), operator=+), name=Query)], body=None, documentation=None, modifiers=set(), name=updateBlog, parameters=[FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qTitle"), name=Param)], modifiers=set(), name=title, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False), FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qUserId"), name=Param)], modifiers=set(), name=userId, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qContent"), name=Param)], modifiers=set(), name=content, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None), varargs=False), FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qPubDate"), name=Param)], modifiers=set(), name=pubDate, type=ReferenceType(arguments=None, dimensions=[], name=Date, sub_type=None), varargs=False), FormalParameter(annotations=[Annotation(element=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="qId"), name=Param)], modifiers=set(), name=id, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=None, throws=None, type_parameters=None)], documentation=/**
 * Created by dzkan on 2016/3/18.
 */, extends=[ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=BlogEntity, sub_type=None)), TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))], dimensions=[], name=JpaRepository, sub_type=None)], modifiers={'public'}, name=BlogRepository, type_parameters=None)])
